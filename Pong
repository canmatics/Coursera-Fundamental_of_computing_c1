#open here:
#http://www.codeskulptor.org/#user43_xPM3VZDbin_5.py

#Game: PONG

########

import simplegui
import random 

#globals 
WIDTH = 600
HEIGHT = 400  
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    
    paddle1_vel = 0
    paddle2_vel = 0
    paddle1_pos  = HEIGHT // 2
    paddle2_pos  = HEIGHT // 2 
    score1 = 0 
    score2 = 0
    
    spawn_ball(True)
    
# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(right):
    global ball_pos, ball_vel # these are vectors stored as lists
    
    ball_pos = [WIDTH/2, HEIGHT/2]
    
    if right:
        ball_vel = [random.randrange(1,5),-random.randrange(1,5)]
    else:
        ball_vel = [-random.randrange(1,5),-random.randrange(1,5)]

def draw_canvas(canvas):   
# draw mid line and gutters
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel,paddle1_vel, paddle2_vel
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")

    # update paddle's vertical position, keep paddle on the screen
    paddle1_pos  += paddle1_vel
    paddle2_pos  += paddle2_vel 
    
    if paddle1_pos <= HALF_PAD_HEIGHT:   
        paddle1_vel = 0
    elif paddle1_pos  >= HEIGHT-HALF_PAD_HEIGHT:
        paddle1_vel = 0
    
    if paddle2_pos  <= HALF_PAD_HEIGHT:
        paddle2_vel = 0
    elif paddle2_pos >= HEIGHT-HALF_PAD_HEIGHT:
        paddle2_vel = 0
    
    # draw paddles
    canvas.draw_line([HALF_PAD_WIDTH, (paddle1_pos+HALF_PAD_HEIGHT)],[(HALF_PAD_WIDTH), (paddle1_pos - HALF_PAD_HEIGHT)],  PAD_WIDTH, "White")
    canvas.draw_line([(WIDTH-HALF_PAD_WIDTH), (paddle2_pos+HALF_PAD_HEIGHT)],[(WIDTH-HALF_PAD_WIDTH), (paddle2_pos - HALF_PAD_HEIGHT)],  PAD_WIDTH, "White")
    # detemine whether paddle and ball collide    
    ## first if ball x position at gutter, then run test to see if y position + ball radius fall within the paddle height 
    ##score it from this determination. have to do both walls
    # draw scores 
       
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    if ball_pos[1] <= BALL_RADIUS or ball_pos[1] >= (HEIGHT - BALL_RADIUS):
        ball_vel[1] = -ball_vel[1]
    
    if ball_pos[0] <= (BALL_RADIUS + PAD_WIDTH):
        if ball_pos[1]  < (paddle1_pos + HALF_PAD_HEIGHT) and ball_pos[1]  > (paddle1_pos - HALF_PAD_HEIGHT):
            ball_vel[0] = -ball_vel[0]
            ball_vel[0] = 1.2*ball_vel[0]
            ball_vel[1] = 1.2*ball_vel[1]
        else:
            score2 += 1
            spawn_ball(True)
    
    if ball_pos[0] >= ((WIDTH-PAD_WIDTH) - BALL_RADIUS):   
        if (ball_pos[1] + BALL_RADIUS) < (paddle2_pos + HALF_PAD_HEIGHT) and (ball_pos[1] + BALL_RADIUS) > (paddle2_pos - HALF_PAD_HEIGHT):
            ball_vel[0] = -ball_vel[0]
            ball_vel[0] = 1.2*ball_vel[0]
            ball_vel[1] = 1.2*ball_vel[1]
        else:
            score1 += 1
            spawn_ball(False)       
    
    #draw ball and scores
    canvas.draw_circle(ball_pos, BALL_RADIUS, 10, 'White')
    canvas.draw_text(str(score1), [275,30], 30, "Red")
    canvas.draw_text(str(score2), [310,30], 30, "Red")

def keydown(key):
    global paddle1_vel, paddle2_vel
    
    if key == simplegui.KEY_MAP['s']:
        paddle1_vel += 8
    if key == simplegui.KEY_MAP['down']:
         paddle2_vel += 8
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel += -8
    if key == simplegui.KEY_MAP['up']:
        paddle2_vel += -8
    
def keyup(key):
    global paddle1_vel, paddle2_vel    
    
    if key == simplegui.KEY_MAP['s']:
        paddle1_vel = 0
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel = 0
    if key == simplegui.KEY_MAP['down']:
        paddle2_vel = 0
    if key == simplegui.KEY_MAP['up']:
        paddle2_vel = 0
        
def restart():
    new_game()
    
#create frame
f = simplegui.create_frame("Pong", WIDTH, HEIGHT)
#register handlers
f.set_draw_handler(draw_canvas)
f.set_keydown_handler(keydown)
f.set_keyup_handler(keyup)
f.add_button("Restart", restart)

#start frame
f.start()
new_game()
